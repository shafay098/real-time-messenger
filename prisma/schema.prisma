// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  createdAt DateTime @default(now())
  hashedPassword String?
  updatedAt DateTime? @updatedAt
  converstationIds String[] @db.ObjectId
  converstaions Converstaion[] @relation(fields: [converstationIds], references: [id] )
  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen" , fields: [seenMessageIds] , references: [id])
  accounts Account[]
  messsages Message[]

}
model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider  String
  hashedPassword String?
  providerAccountId String
  refreshToken String? @db.String
  accessToken String? @db.String // Correct field name
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId] , references: [id] , onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Converstaion {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  created_at DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?
  messagesIds String[] @db.ObjectId
  messages Message[]
  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
}


model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  images String?
  createdAt DateTime @default(now())
  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen" , fields: [seenIds] , references: [id])
  conversationId String @db.ObjectId
  conversation Converstaion @relation(fields: [conversationId], references: [id])
  senderId String @db.ObjectId
  sender User @relation(fields: [senderId] , references: [id] , onDelete: Cascade)

}

